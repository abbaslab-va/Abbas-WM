

function CLAS_phase3_v2

% Phase_2 will be adding a limit to chirps (4) 

% SETUP
% You will need:
% - A Bpod MouseBox (or equivalent) configured with 3 ports.
% > Connect the left port in the box to Bpod Port#1.
% > Connect the center port in the box to Bpod Port#2.
% > Connect the right port in the box to Bpod Port#3.
% > Make sure the liquid calibration tables for ports 1 and 3 have 
%   calibration curves with several points surrounding 3ul.

global BpodSystem

%% Define parameters
S = BpodSystem.ProtocolSettings; % Load settings chosen in launch manager into current workspace as a struct called S
if isempty(fieldnames(S))  % If settings file was an empty struct, populate struct with default settings
    S.GUI.ForageReward = 2; %ul
    S.GUI.ChirpReward = 8; 
    S.GUI.ITI = 10; % How long the mouse must poke in the center to activate the goal port
    S.GUI.ResponseTime = 5; % How long until the mouse must make a choice, or forefeit the trial
    S.GUI.SweepUpLow=10000;
    S.GUI.SweepUpHigh=14000;
    S.GUI.SoundDuration = 1;
    S.GUI.SamplingFreq = 44100;
    S.GUI.PunishTime=5;
    S.GUI.PuffTime=0.25; 
    S.GUI.DrinkGrace=0.5;
    S.GUI.TrialTime=30;
 
    
end
%%
if (isfield(BpodSystem.ModuleUSB, 'TeensyAudio1'))
    TeensyAudioUSB = BpodSystem.ModuleUSB.TeensyAudio1;
else
    error('Error: To run this protocol, you must first pair the TeensyAudio1 module with its USB port. Click the USB config button on the Bpod console.')
end


%% Define trials
MaxTrials = 200;
TrialTypes = zeros(1, 100);
for fill = 1:100
    indices = randperm(8);
    block=[1 2 3 4 5 6 7 8] ;
   
    for shuffle=1:8
        pick(shuffle)=block(indices(shuffle));
    end     
    TrialTypes(fill*8-7:fill*8) = pick; 

end 
% indices2=randperm(10);
%     block=[1 1 1 1 1 2 2 2 2 2];
%     pickBegin=block(indices2);
% TrialTypes=[pickBegin TrialTypes];

BpodSystem.Data.TrialTypes = []; % The trial type of each trial completed will be added here.

%% Initialize plots
BpodSystem.ProtocolFigures.TrialTypeOutcomePlotFig = figure('Position', [50 540 1000 200],'name','Outcome plot','numbertitle','off', 'MenuBar', 'none', 'Resize', 'off');
BpodSystem.GUIHandles.TrialTypeOutcomePlot = axes('Position', [.075 .3 .89 .6]);
TrialTypeOutcomePlot(BpodSystem.GUIHandles.TrialTypeOutcomePlot,'init',TrialTypes);
BpodNotebook('init');
BpodParameterGUI('init', S); % Initialize parameter GUI plugin
 

%% %% Create an instance of the TeensyAudioPlayer module 
T = TeensyAudioPlayer(TeensyAudioUSB);
%LoadSerialMessages('ValveModule1',{['O' 3],['C' 3]})
%% Define stimuli and send to Teensy
% SF = S.GUI.SamplingFreq;
% t = linspace(0, S.GUI.SoundDuration, S.GUI.SoundDuration*S.GUI.SamplingFreq);
% UpSweep = chirp(t, S.GUI.SweepUpLow, t(end), S.GUI.SweepUpHigh);


% 
 Chirp20to1=audioread('newCHIRP_SNR20to1.wav');
 %Chirp1to1=audioread('newCHIRP_SNR1to1.wav');
 Noise=audioread('newNOISE.wav');
% Noise1to5=audioread('Noise_1to5.wav');
 Silence=zeros(1,44100);
% 
% 
T.load(1, Noise);
T.load(2, Chirp20to1);
T.load(3, Silence);
%T.load(4,  Chirp1to1);
%T.load(5,   Noise1to5);

% 
analogPortIndex = find(strcmp(BpodSystem.Modules.Name, 'TeensyAudio1'));
if isempty(analogPortIndex)
    error('Error: Bpod TeensyAudio module not found. If you just plugged it in, please restart Bpod.')
end

%% Main trial loop

BpodSystem.SoftCodeHandlerFunction = 'CLAS_phase1_v2_FUN';
global visited

for currentTrial = 1:MaxTrials
    S = BpodParameterGUI('sync', S); % Sync parameters with BpodParameterGUI plugin
    
BpodSystem.Data.PortsVisited= zeros(1,6);

visited=zeros(1,6);


switch TrialTypes(currentTrial)
    case 1 
      PickDur=7
      PickNoise=1
      PickChirp=2
    case 2
        PickDur=8
     PickNoise=1
      PickChirp=2
    case 3
    PickDur=10  
    PickNoise=1
      PickChirp=2
    
    case 4
     PickDur=12
     PickNoise=1
      PickChirp=2
        
    case 5
      PickDur=14 
     PickNoise=1
      PickChirp=2
       
       
     case 6 
      PickDur=16
     PickNoise=1
      PickChirp=2

    
    case 7
      
       PickDur=100
       PickNoise=1
       PickChirp=1
        
    case 8
       
       PickDur=100
       PickNoise=1
       PickChirp=1

         
end 
          
        sma = NewStateMachine(); % Initialize new state machine description
        
          sma=SetGlobalTimer(sma,'TimerID',1,'Duration',PickDur)
          sma=SetGlobalTimer(sma,'TimerID',2,'Duration',S.GUI.TrialTime)
               
%First Wire (65529) Stamps begining on Trial Start (Start of ITI)
         sma = AddState(sma, 'Name', 'ITI', ...
            'Timer',S.GUI.ITI,...
            'StateChangeConditions', {'Tup','TriggerTimers1'},...
            'OutputActions',{'TeensyAudio1',3,'Wire1',1});
        
         sma = AddState(sma, 'Name', 'TriggerTimers1', ...
            'Timer',0,...
            'StateChangeConditions', {'Tup','TriggerTimers2'},...
            'OutputActions',{'GlobalTimerTrig',2});
        
        sma = AddState(sma, 'Name', 'TriggerTimers2', ...
            'Timer',0,...
            'StateChangeConditions', {'Tup','StartSound'},...
            'OutputActions',{'GlobalTimerTrig',1});
        
        %     
% sma = AddState(sma, 'Name', 'Prime1', ...
%     'Timer',GetValveTimes(S.GUI.ForageReward,1),...
%     'StateChangeConditions', {'Tup','Prime2'},...
%     'OutputActions',{'Valve1',1});
%     
% sma = AddState(sma, 'Name', 'Prime2', ...
%     'Timer',GetValveTimes(S.GUI.ForageReward,2),...
%     'StateChangeConditions', {'Tup','Prime3'},...
%     'OutputActions',{'Valve2',1});
% 
% sma = AddState(sma, 'Name', 'Prime3', ...
%    'Timer',GetValveTimes(S.GUI.ForageReward,3),...
%     'StateChangeConditions', {'Tup','Prime4'},...
%     'OutputActions',{'Valve3',1});
% 
% sma = AddState(sma, 'Name', 'Prime4', ...
%     'Timer',GetValveTimes(S.GUI.ForageReward,4),...
%     'StateChangeConditions', {'Tup','Prime5'},...
%     'OutputActions',{'Valve4',1});
% 
% sma = AddState(sma, 'Name', 'Prime5', ...
%     'Timer',GetValveTimes(S.GUI.ForageReward,5),...
%     'StateChangeConditions', {'Tup','WaitForFirstPoke'},...
%     'OutputActions',{'Valve5',1});

  %Start of Noise/Start of Trial wire 2 and Wire3 ( 65534)        
        sma = AddState(sma, 'Name', 'StartSound', ...
            'Timer',0,...
            'StateChangeConditions', {'Tup','WaitForFirstPoke'},...
            'OutputActions',{'TeensyAudio1',PickNoise,'Wire2',1,'Wire3',1});            
        

        sma = AddState(sma, 'Name', 'WaitForFirstPoke', ...
            'Timer',0,...
            'StateChangeConditions', {'Port1In','SetTime1','Port2In','SetTime2','Port3In','SetTime3','Port4In','SetTime4','Port5In','SetTime5','GlobalTimer2_End','exit','GlobalTimer1_End','Chirp1'},...
            'OutputActions',{'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50});
        
           sma = AddState(sma, 'Name', 'SetTime1', ...
            'Timer',0,...
            'StateChangeConditions', {'Tup','WaitForPoke'},...
            'OutputActions',{'SoftCode',1});
        
        
        sma = AddState(sma, 'Name', 'SetTime2', ...
            'Timer',0,...
            'StateChangeConditions', {'Tup','WaitForPoke'},...
            'OutputActions',{'SoftCode',2});
        
        sma = AddState(sma, 'Name', 'SetTime3', ...
            'Timer',0,...
            'StateChangeConditions', {'Tup','WaitForPoke'},...
            'OutputActions',{'SoftCode',3});
        
        sma = AddState(sma, 'Name', 'SetTime4', ...
            'Timer',0,...
            'StateChangeConditions', {'Tup','WaitForPoke'},...
            'OutputActions',{'SoftCode',4});
        
        sma = AddState(sma, 'Name', 'SetTime5', ...
            'Timer',0,...
            'StateChangeConditions', {'Tup','WaitForPoke'},...
            'OutputActions',{'SoftCode',5});
        
         sma = AddState(sma, 'Name', 'SetTime6', ...
            'Timer',0,...
            'StateChangeConditions', {'Tup','WaitForPoke'},...
            'OutputActions',{'SoftCode',6});
        
        
         sma = AddState(sma, 'Name', 'Port1InMark', ...
            'Timer',0,...
            'StateChangeConditions', {'GlobalTimer1_End','Chirp1','Tup','WaitForPoke','GlobalTimer2_End','exit'},...
            'OutputActions',{'SoftCode',1});
        
        

        
        sma = AddState(sma, 'Name', 'Port2InMark', ...
            'Timer',0,...
            'StateChangeConditions', {'GlobalTimer1_End','Chirp1','Tup','WaitForPoke','GlobalTimer2_End','exit'},...
            'OutputActions',{'SoftCode',2});
        
        
     
        
        sma = AddState(sma, 'Name', 'Port3InMark', ...
            'Timer',0,...
            'StateChangeConditions', {'GlobalTimer1_End','Chirp1','Tup','WaitForPoke','GlobalTimer2_End','exit'},...
            'OutputActions',{'SoftCode',3});
        
      
        
        sma = AddState(sma, 'Name', 'Port4InMark', ...
            'Timer',0,...
            'StateChangeConditions', {'GlobalTimer1_End','Chirp1','Tup','WaitForPoke','GlobalTimer2_End','exit'},...
            'OutputActions',{'SoftCode',4});
        
   
        
        sma = AddState(sma, 'Name', 'Port5InMark', ...
            'Timer',0,...
            'StateChangeConditions', {'GlobalTimer1_End','Chirp1','Tup','WaitForPoke','GlobalTimer2_End','exit'},...
            'OutputActions',{'SoftCode',5});
        
          
%         sma = AddState(sma, 'Name', 'Port6InMark', ...
%             'Timer',0,...
%             'StateChangeConditions', {'Tup','WaitForPoke','GlobalTimer2_End','exit'},...
%             'OutputActions',{'SoftCode',6});
% %         
        
 %Wire 1 & 2=65531= Reward Forage Port        

        sma = AddState(sma, 'Name', 'WaitForPoke', ...
            'Timer',0,...
            'StateChangeConditions', {'GlobalTimer1_End','Chirp1','SoftCode1', 'Reward1','SoftCode2', 'Reward2','SoftCode3', 'Reward3','SoftCode4', 'Reward4','SoftCode5', 'Reward5','GlobalTimer2_End','exit'},...
            'OutputActions',{'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50});

        sma = AddState(sma, 'Name', 'Reward1', ...
                'Timer',0,...
                'StateChangeConditions', {'GlobalTimer1_End','Chirp1','Port1In','Reward1_1','GlobalTimer2_End','exit','Port7In','Punish'},...
                'OutputActions',{'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50});

        sma = AddState(sma, 'Name', 'Reward1_1', ...
                'Timer',GetValveTimes(S.GUI.ForageReward,1),...
                'StateChangeConditions', {'GlobalTimer1_End','Chirp1','Tup','DrinkGrace1','GlobalTimer2_End','exit','Port7In','Punish'},...
                'OutputActions',{'Valve1',1,'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50,'Wire1',1,'Wire2',1});  

         sma = AddState(sma, 'Name', 'Reward2', ...
                'Timer',0,...
                'StateChangeConditions', {'GlobalTimer1_End','Chirp1','Port2In','Reward2_1','GlobalTimer2_End','exit','Port7In','Punish'},...
                'OutputActions',{'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50,'PWM7', 50});


         sma = AddState(sma, 'Name', 'Reward2_1', ...
                'Timer',GetValveTimes(S.GUI.ForageReward,2),...
                'StateChangeConditions', {'GlobalTimer1_End','Chirp1','Tup','DrinkGrace2','GlobalTimer2_End','exit','Port7In','Punish'},...
                'OutputActions',{'Valve2',1,'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50,'Wire1',1,'Wire2',1});



         sma = AddState(sma, 'Name', 'Reward3', ...
                'Timer',0,...
                'StateChangeConditions', {'GlobalTimer1_End','Chirp1','Port3In','Reward3_1','GlobalTimer2_End','exit','Port7In','Punish'},...
                'OutputActions',{'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50});


            sma = AddState(sma, 'Name', 'Reward3_1', ...
                'Timer',GetValveTimes(S.GUI.ForageReward,3),...
                'StateChangeConditions', {'GlobalTimer1_End','Chirp1','Tup','DrinkGrace3','GlobalTimer2_End','exit','Port7In','Punish'},...
                'OutputActions',{'Valve3',1,'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50,'Wire1',1,'Wire2',1});




         sma = AddState(sma, 'Name', 'Reward4', ...
                'Timer',0,...
                'StateChangeConditions', {'GlobalTimer1_End','Chirp1','Port4In','Reward4_1','GlobalTimer2_End','exit','Port7In','Punish'},...
                'OutputActions',{'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50});


            sma = AddState(sma, 'Name', 'Reward4_1', ...
                'Timer',GetValveTimes(S.GUI.ForageReward,4),...
                'StateChangeConditions', {'GlobalTimer1_End','Chirp1','Tup','DrinkGrace4','GlobalTimer2_End','exit','Port7In','Punish'},...
                'OutputActions',{'Valve4',1,'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50,'Wire1',1,'Wire2',1});
           

           sma = AddState(sma, 'Name', 'Reward5', ...
                'Timer',0,...
                'StateChangeConditions', {'GlobalTimer1_End','Chirp1','Port5In','Reward5_1','GlobalTimer2_End','exit','Port7In','Punish'},...
                'OutputActions',{'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50});


            sma = AddState(sma, 'Name', 'Reward5_1', ...
                'Timer',GetValveTimes(S.GUI.ForageReward,5),...
                'StateChangeConditions', {'GlobalTimer1_End','Chirp1','Tup','DrinkGrace5','GlobalTimer2_End','exit','Port7In','Punish'},...
                'OutputActions',{'Valve5',1,'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50,'Wire1',1,'Wire2',1});
            
%                   sma = AddState(sma, 'Name', 'Reward6', ...
%                 'Timer',0,...
%                 'StateChangeConditions', {'Port7In','Reward6_1','GlobalTimer2_End','exit'},...
%                 'OutputActions',{'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50});
% 
% 
%             sma = AddState(sma, 'Name', 'Reward6_1', ...
%                 'Timer',GetValveTimes(S.GUI.ForageReward,7),...
%                 'StateChangeConditions', {'Tup','DrinkGrace6','GlobalTimer2_End','exit'},...
%                 'OutputActions',{'Valve7',1,'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50});
            
            
            
        
            sma = AddState(sma, 'Name', 'DrinkGrace1', ...
                'Timer',S.GUI.DrinkGrace,...
                'StateChangeConditions', {'GlobalTimer1_End','Chirp1','Tup','Port1InMark','GlobalTimer2_End','exit','Port7In','Punish'},...
                'OutputActions',{'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50}); 
            
              sma = AddState(sma, 'Name', 'DrinkGrace2', ...
                'Timer',S.GUI.DrinkGrace,...
                'StateChangeConditions', {'GlobalTimer1_End','Chirp1','Tup','Port2InMark','GlobalTimer2_End','exit','Port7In','Punish'},...
                'OutputActions',{'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50}); 
              
            sma = AddState(sma, 'Name', 'DrinkGrace3', ...
                'Timer',S.GUI.DrinkGrace,...
                'StateChangeConditions', {'GlobalTimer1_End','Chirp1','Tup','Port3InMark','GlobalTimer2_End','exit','Port7In','Punish'},...
                'OutputActions',{'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50}); 
              
            sma = AddState(sma, 'Name', 'DrinkGrace4', ...
                'Timer',S.GUI.DrinkGrace,...
                'StateChangeConditions', {'GlobalTimer1_End','Chirp1','Tup','Port4InMark','GlobalTimer2_End','exit','Port7In','Punish'},...
                'OutputActions',{'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50}); 
            
            sma = AddState(sma, 'Name', 'DrinkGrace5', ...
                'Timer',S.GUI.DrinkGrace,...
                'StateChangeConditions', {'GlobalTimer1_End','Chirp1','Tup','Port5InMark','GlobalTimer2_End','exit','Port7In','Punish'},...
                'OutputActions',{'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50}); 
            
%              sma = AddState(sma, 'Name', 'DrinkGrace6', ...
%                 'Timer',S.GUI.DrinkGrace,...
%                 'StateChangeConditions', {'Tup','Port6InMark','GlobalTimer2_End','exit'},...
%                 'OutputActions',{'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50}); 
            
            %'Port1In','PunishFrontVisit','Port2In','PunishFrontVisit','Port3In','PunishFrontVisit','Port4In','PunishFrontVisit','Port5In','PunishFrontVisit'
             sma = AddState(sma, 'Name', 'Chirp1', ...
                'Timer',0,...
                'StateChangeConditions', {'Port1Out','ChirpPlay','Port2Out','ChirpPlay','Port3Out','ChirpPlay','Port4Out','ChirpPlay','Port5Out','ChirpPlay','GlobalTimer2_End','exit'},...
                'OutputActions',{'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50 'PWM7', 50});
% % % Wire 2 denotes the Playing of the Chirp (65530)            
            sma = AddState(sma, 'Name', 'ChirpPlay', ...
                'Timer',0.5,...
                'StateChangeConditions', {'Tup','WaitForChirp1','Port7In','Reward','GlobalTimer2_End','exit'},...
                'OutputActions',{'TeensyAudio1',PickChirp,'Wire2',1,'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50});
            
             sma = AddState(sma, 'Name', 'WaitForChirp1', ...
               'Timer',3,...
                'StateChangeConditions', {'Tup','Abort','Port7In','Reward','GlobalTimer2_End','exit'},...
                'OutputActions',{'TeensyAudio1',PickNoise,'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50});
%           
%           
%             sma = AddState(sma, 'Name', 'Chirp2', ...
%                 'Timer',0.5,...
%                 'StateChangeConditions', {'Tup','WaitForChirp2','Port7In','Reward','GlobalTimer2_End','exit'},...
%                 'OutputActions',{'TeensyAudio1',PickChirp,'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50});
%             
%                         
%              sma = AddState(sma, 'Name', 'WaitForChirp2', ...
%                 'Timer',0.5,...
%                 'StateChangeConditions', {'Tup','Chirp3','Port7In','Reward','GlobalTimer2_End','exit'},...
%                 'OutputActions',{'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50});
% %           
%           
%             sma = AddState(sma, 'Name', 'Chirp3', ...
%                 'Timer',0.5,...
%                 'StateChangeConditions', {'Tup','WaitForChirp3','Port7In','Reward','GlobalTimer2_End','exit'},...
%                 'OutputActions',{'TeensyAudio1',PickChirp,'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50});
%             
%             sma = AddState(sma, 'Name', 'WaitForChirp3', ...
%                 'Timer',0.5,...
%                 'StateChangeConditions', {'Tup','Chirp4','Port7In','Reward','GlobalTimer2_End','exit'},...
%                 'OutputActions',{'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50});
% %           
%           
%             sma = AddState(sma, 'Name', 'Chirp4', ...
%                 'Timer',0.5,...
%                 'StateChangeConditions', {'Tup','WaitForChirp4','Port7In','Reward','GlobalTimer2_End','exit'},...
%                 'OutputActions',{'TeensyAudio1',PickChirp,'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50});
%             
%             sma = AddState(sma, 'Name', 'WaitForChirp4', ...
%                 'Timer',3,...
%                 'StateChangeConditions', {'Tup','Abort','Port7In','Reward','GlobalTimer2_End','exit'},...
%                 'OutputActions',{'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50})
% % % Wire 3 denotes the Reward Back Port(65532)                       
%         
            sma = AddState(sma, 'Name', 'Reward', ...
                'Timer',GetValveTimes(S.GUI.ChirpReward,7),...
                'StateChangeConditions', {'Tup','DrinkGrace7','GlobalTimer2_End','exit'},...
                'OutputActions',{'Valve7',1,'Wire3',1,'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50});
%             
             sma = AddState(sma, 'Name', 'DrinkGrace7', ...
                'Timer',1,...
                'StateChangeConditions', {'Tup','WaitForFirstPoke','GlobalTimer2_End','exit'},...
                'OutputActions',{'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50});
%             
%             
%                 
%             sma = AddState(sma, 'Name', 'PunishBackVisit', ...
%                 'Timer',S.GUI.PuffTime,...
%                 'StateChangeConditions', {'Tup','Punish','GlobalTimer2_End','exit'},...
%                 'OutputActions',{'TeensyAudio1',3,'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50 'PWM7', 50});  %'ValveModule1',1,'Valve6'
%             
% %              sma = AddState(sma, 'Name', 'PuffClose', ...
% %                 'Timer',0,...
% %                 'StateChangeConditions', {'Tup','Punish','GlobalTimer2_End','exit'},...
% %                 'OutputActions',{'ValveModule1',2,'PWM1', 50,'PWM2', 50,'PWM3', 50,'PWM4', 50,'PWM5', 50, 'PWM7', 50});
% % CAN I HAVE A WIRE FOR ABORT??             
             sma = AddState(sma, 'Name', 'Abort', ...
                'Timer',0,...
                'StateChangeConditions', {'Tup','WaitForFirstPoke'},...
                'OutputActions',{});
% %Wire 1 and 3 (65533) denoting Wrong Back port visit.                
%                
            sma = AddState(sma, 'Name', 'Punish', ...
                'Timer',S.GUI.PunishTime,...
                'StateChangeConditions', {'Tup','exit','GlobalTimer2_End','exit'},...
                'OutputActions',{'Wire1',1,'Wire3',1});
            %'Valve6',1,   --Punish Light
%             
%             
%             sma = AddState(sma, 'Name', 'PunishFrontVisit', ...
%                 'Timer',0,...
%                 'StateChangeConditions', {'Tup','exit'},...
%                 'OutputActions',{'Valve6',1});
          


            SendStateMatrix(sma);
            RawEvents = RunStateMatrix;
            if ~isempty(fieldnames(RawEvents)) % If trial data was returned
                BpodSystem.Data = AddTrialEvents(BpodSystem.Data,RawEvents); % Computes trial events from raw data
                BpodSystem.Data = BpodNotebook('sync', BpodSystem.Data); % Sync with Bpod notebook plugin
                BpodSystem.Data.TrialSettings(currentTrial) = S; % Adds the settings used for the current trial to the Data struct (to be saved after the trial ends)
                BpodSystem.Data.TrialTypes(currentTrial) = TrialTypes(currentTrial); % Adds the trial type of the current trial to data
                UpdateTrialTypeOutcomePlot(TrialTypes, BpodSystem.Data);
                SaveBpodSessionData; % Saves the field BpodSystem.Data to the current data file
            end
            HandlePauseCondition; % Checks to see if the protocol is paused. If so, waits until user resumes.
            if BpodSystem.Status.BeingUsed == 0
                return
            end
    
        
end



function UpdateTrialTypeOutcomePlot(TrialTypes, Data)
% Determine outcomes from state data and score as the TrialTypeOutcomePlot
% plugin expects
global BpodSystem
Outcomes = zeros(1,Data.nTrials);
for x = 1:Data.nTrials
    if ~isnan(Data.RawEvents.Trial{x}.States.Punish(1))
        Outcomes(x) = 0;
        
    elseif ~isnan(Data.RawEvents.Trial{x}.States.Reward(1))
        Outcomes(x) = 1;
        
    elseif ~isnan(Data.RawEvents.Trial{x}.States.Abort(1))
        Outcomes(x) = 3;
    else
        Outcomes(x) = 1;
    end
end
BpodSystem.Data.SessionPerformance = Outcomes;
SaveBpodSessionData;
TrialTypeOutcomePlot(BpodSystem.GUIHandles.TrialTypeOutcomePlot,'update',Data.nTrials+1,TrialTypes,Outcomes);
